{"remainingRequest":"/home/karson/Desktop/godo_test/new_client/testapp/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karson/Desktop/godo_test/new_client/testapp/src/components/GoogleMap.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karson/Desktop/godo_test/new_client/testapp/src/components/GoogleMap.vue","mtime":1563212970627},{"path":"/home/karson/Desktop/godo_test/new_client/testapp/node_modules/cache-loader/dist/cjs.js","mtime":1557962322296},{"path":"/home/karson/Desktop/godo_test/new_client/testapp/node_modules/babel-loader/lib/index.js","mtime":1557962314582},{"path":"/home/karson/Desktop/godo_test/new_client/testapp/node_modules/cache-loader/dist/cjs.js","mtime":1557962322296},{"path":"/home/karson/Desktop/godo_test/new_client/testapp/node_modules/vue-loader/lib/index.js","mtime":1557962322909}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: \"GoogleMap\",\n  props: {\n    events: Array,\n  },\n\n  data() {\n    return {\n      map: null,\n      center: { lat: 45.508, lng: -73.587 },\n      infoContent: '',\n      infoWindowPos: { lat: 0, lng: 0},\n      infoWinOpen: false,\n      currentMidx: null,\n      infoOptions: null,\n      newEventName: \"\",\n      newEventHost: \"\",\n      newEventCategory: \"\",\n      newEventDescription: \"\",\n      newEventPlace: {},\n      newEventAttendees: null,\n      drawer: false,\n      markers: [\n        {\n          name: \"Swimming at the City Pool\",\n          host: \"Karson\",\n          category: \"Outdoors\",\n          description: \"We are going swimming at the city pool\",\n          position: {lat: 52.512, lng: 6.0896},\n          attendees: 7\n        },\n        {\n          name: \"Swimming at the City Pool\",\n          host: \"Karson\",\n          category: \"Outdoors\",\n          description: \"We are going swimming at the city pool\",\n          position: {lat: 152.512, lng: 16.0896},\n          attendees: 7\n        }\n      ],\n      activities: [\n      ],\n      places: [],\n      infoWindows: [],\n      currentPlace: null,\n      \n    };\n  },\n\n  mounted() {\n    this.geolocate();\n    this.getPlaces();\n    // this.convertActivities(this.activities);\n    // this.addMarkers();\n  },\n\n  methods: {\n    // receives a place object via the autocomplete component\n    setPlace(place) {\n      console.log(place);\n      this.newEventPlace = place;\n    },\n    addMarker() {\n      if (this.currentPlace) {\n        const marker = {\n          lat: this.currentPlace.geometry.location.lat(),\n          lng: this.currentPlace.geometry.location.lng()\n        };\n        this.markers.push({ position: marker });\n        this.places.push(this.currentPlace);\n        this.center = marker;\n        this.currentPlace = null;\n      }\n    },\n    addActivity: function() {\n      var activity = {\n        name: this.newEventName,\n        host: this.newEventHost,\n        category: this.newEventCategory,\n        place: this.newEventPlace,\n        attendees: this.newEventAttendees\n      };\n      this.activities.push(activity);\n      this.convertActivities(this.activities);\n    },\n\n    geolocate: function() {\n      navigator.geolocation.getCurrentPosition(position => {\n        this.center = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n      });\n    },\n\n    getPlaces: function() {\n      fetch(\"http://localhost:8080/places\").then(response => {\n        response.json().then(data => {\n          //console.log(data);\n          this.places = data.places;\n          console.log(this.places);\n          this.addMarkers(this.places);\n        });\n      });\n    },\n\n    getInfoWindowContent: function(event) {\n      return (`<div>\n        <div>\n          <h1>${event.name}</h1>\n        </div>\n        <div>\n          <h4>Hosted By: ${event.host} <br> Category: ${event.category}</h4> <br> Minimum Age: ${event.age}\n        </div>\n        <div>\n          <p>${event.description}</p>\n        </div>\n      </div>`);\n    },\n\n    convertActivities: function(activities) {\n      for (var index in activities){\n        console.log(activities[index]);\n        var marker = {\n          name: activities[index].name,\n          host: activities[index].host,\n          category: activities[index].main_category,\n          position: {\n            lat: activities[index].place.geometry.location.lat(),\n            lng: activities[index].place.geometry.location.lng()\n          },\n          icon: {\n            url: this.getMarkerColor(activities[index])\n          }\n\n        };\n        this.markers.push(marker);\n      }\n    },\n\n\n    toggleInfoWindow: function(marker, index) {\n      this.infoWindowPos = marker.position;\n      this.infoContent = this.getInfoWindowContent(marker);\n      console.log(this.infoContent);\n\n      if (this.currentMidx) {\n        this.infoWinOpen = !this.infoWinOpen;\n      } else {\n        this.infoWinOpen = true;\n        this.currentMidx = index;\n      }\n    },\n\n    //1-5 --> Blue\n    //6-10 --> Purple\n    //11-20 --> Green\n    //21-50 --> Yellow\n    //51-100 --> Red\n\n\n  }\n}\n",{"version":3,"sources":["GoogleMap.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA","file":"GoogleMap.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div light>\n    <gmap-map\n      ref=\"map\"\n      :center=\"center\"\n      :zoom=\"12\"\n      style=\"width:100%;  height: 100vh;\"\n    >\n      <gmap-marker\n        :key=\"index\"\n        v-for=\"(m, index) in markers\"\n        :position=\"m.position\"\n        @click=\"toggleInfoWindow(m, index)\"\n      ></gmap-marker>\n\n      <gmap-info-window class=\"light\"\n        :options=\"infoOptions\"\n        :position=\"infoWindowPos\"\n        :opened=\"infoWinOpen\"\n        @closeClick=\"infoWinOpen=false\">\n\n        <div v-html=\"infoContent\"></div>\n\n      </gmap-info-window>\n\n    </gmap-map>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"GoogleMap\",\n  props: {\n    events: Array,\n  },\n\n  data() {\n    return {\n      map: null,\n      center: { lat: 45.508, lng: -73.587 },\n      infoContent: '',\n      infoWindowPos: { lat: 0, lng: 0},\n      infoWinOpen: false,\n      currentMidx: null,\n      infoOptions: null,\n      newEventName: \"\",\n      newEventHost: \"\",\n      newEventCategory: \"\",\n      newEventDescription: \"\",\n      newEventPlace: {},\n      newEventAttendees: null,\n      drawer: false,\n      markers: [\n        {\n          name: \"Swimming at the City Pool\",\n          host: \"Karson\",\n          category: \"Outdoors\",\n          description: \"We are going swimming at the city pool\",\n          position: {lat: 52.512, lng: 6.0896},\n          attendees: 7\n        },\n        {\n          name: \"Swimming at the City Pool\",\n          host: \"Karson\",\n          category: \"Outdoors\",\n          description: \"We are going swimming at the city pool\",\n          position: {lat: 152.512, lng: 16.0896},\n          attendees: 7\n        }\n      ],\n      activities: [\n      ],\n      places: [],\n      infoWindows: [],\n      currentPlace: null,\n      \n    };\n  },\n\n  mounted() {\n    this.geolocate();\n    this.getPlaces();\n    // this.convertActivities(this.activities);\n    // this.addMarkers();\n  },\n\n  methods: {\n    // receives a place object via the autocomplete component\n    setPlace(place) {\n      console.log(place);\n      this.newEventPlace = place;\n    },\n    addMarker() {\n      if (this.currentPlace) {\n        const marker = {\n          lat: this.currentPlace.geometry.location.lat(),\n          lng: this.currentPlace.geometry.location.lng()\n        };\n        this.markers.push({ position: marker });\n        this.places.push(this.currentPlace);\n        this.center = marker;\n        this.currentPlace = null;\n      }\n    },\n    addActivity: function() {\n      var activity = {\n        name: this.newEventName,\n        host: this.newEventHost,\n        category: this.newEventCategory,\n        place: this.newEventPlace,\n        attendees: this.newEventAttendees\n      };\n      this.activities.push(activity);\n      this.convertActivities(this.activities);\n    },\n\n    geolocate: function() {\n      navigator.geolocation.getCurrentPosition(position => {\n        this.center = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n      });\n    },\n\n    getPlaces: function() {\n      fetch(\"http://localhost:8080/places\").then(response => {\n        response.json().then(data => {\n          //console.log(data);\n          this.places = data.places;\n          console.log(this.places);\n          this.addMarkers(this.places);\n        });\n      });\n    },\n\n    getInfoWindowContent: function(event) {\n      return (`<div>\n        <div>\n          <h1>${event.name}</h1>\n        </div>\n        <div>\n          <h4>Hosted By: ${event.host} <br> Category: ${event.category}</h4> <br> Minimum Age: ${event.age}\n        </div>\n        <div>\n          <p>${event.description}</p>\n        </div>\n      </div>`);\n    },\n\n    convertActivities: function(activities) {\n      for (var index in activities){\n        console.log(activities[index]);\n        var marker = {\n          name: activities[index].name,\n          host: activities[index].host,\n          category: activities[index].main_category,\n          position: {\n            lat: activities[index].place.geometry.location.lat(),\n            lng: activities[index].place.geometry.location.lng()\n          },\n          icon: {\n            url: this.getMarkerColor(activities[index])\n          }\n\n        };\n        this.markers.push(marker);\n      }\n    },\n\n\n    toggleInfoWindow: function(marker, index) {\n      this.infoWindowPos = marker.position;\n      this.infoContent = this.getInfoWindowContent(marker);\n      console.log(this.infoContent);\n\n      if (this.currentMidx) {\n        this.infoWinOpen = !this.infoWinOpen;\n      } else {\n        this.infoWinOpen = true;\n        this.currentMidx = index;\n      }\n    },\n\n    //1-5 --> Blue\n    //6-10 --> Purple\n    //11-20 --> Green\n    //21-50 --> Yellow\n    //51-100 --> Red\n\n\n  }\n}\n</script>\n\n<style scoped>\n.light {\n  color: black;\n}\n</style>\n\n\n\n"]}]}