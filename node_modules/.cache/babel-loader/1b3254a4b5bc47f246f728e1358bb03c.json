{"remainingRequest":"/home/karson/Desktop/godo_test/new_client/testapp/node_modules/babel-loader/lib/index.js!/home/karson/Desktop/godo_test/new_client/testapp/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/karson/Desktop/godo_test/new_client/testapp/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/karson/Desktop/godo_test/new_client/testapp/src/components/GoogleMap.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/karson/Desktop/godo_test/new_client/testapp/src/components/GoogleMap.vue","mtime":1563212970627},{"path":"/home/karson/Desktop/godo_test/new_client/testapp/node_modules/cache-loader/dist/cjs.js","mtime":1557962322296},{"path":"/home/karson/Desktop/godo_test/new_client/testapp/node_modules/babel-loader/lib/index.js","mtime":1557962314582},{"path":"/home/karson/Desktop/godo_test/new_client/testapp/node_modules/cache-loader/dist/cjs.js","mtime":1557962322296},{"path":"/home/karson/Desktop/godo_test/new_client/testapp/node_modules/vue-loader/lib/index.js","mtime":1557962322909}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"GoogleMap\",\n  props: {\n    events: Array\n  },\n  data: function data() {\n    return {\n      map: null,\n      center: {\n        lat: 45.508,\n        lng: -73.587\n      },\n      infoContent: '',\n      infoWindowPos: {\n        lat: 0,\n        lng: 0\n      },\n      infoWinOpen: false,\n      currentMidx: null,\n      infoOptions: null,\n      newEventName: \"\",\n      newEventHost: \"\",\n      newEventCategory: \"\",\n      newEventDescription: \"\",\n      newEventPlace: {},\n      newEventAttendees: null,\n      drawer: false,\n      markers: [{\n        name: \"Swimming at the City Pool\",\n        host: \"Karson\",\n        category: \"Outdoors\",\n        description: \"We are going swimming at the city pool\",\n        position: {\n          lat: 52.512,\n          lng: 6.0896\n        },\n        attendees: 7\n      }, {\n        name: \"Swimming at the City Pool\",\n        host: \"Karson\",\n        category: \"Outdoors\",\n        description: \"We are going swimming at the city pool\",\n        position: {\n          lat: 152.512,\n          lng: 16.0896\n        },\n        attendees: 7\n      }],\n      activities: [],\n      places: [],\n      infoWindows: [],\n      currentPlace: null\n    };\n  },\n  mounted: function mounted() {\n    this.geolocate();\n    this.getPlaces(); // this.convertActivities(this.activities);\n    // this.addMarkers();\n  },\n  methods: {\n    // receives a place object via the autocomplete component\n    setPlace: function setPlace(place) {\n      console.log(place);\n      this.newEventPlace = place;\n    },\n    addMarker: function addMarker() {\n      if (this.currentPlace) {\n        var marker = {\n          lat: this.currentPlace.geometry.location.lat(),\n          lng: this.currentPlace.geometry.location.lng()\n        };\n        this.markers.push({\n          position: marker\n        });\n        this.places.push(this.currentPlace);\n        this.center = marker;\n        this.currentPlace = null;\n      }\n    },\n    addActivity: function addActivity() {\n      var activity = {\n        name: this.newEventName,\n        host: this.newEventHost,\n        category: this.newEventCategory,\n        place: this.newEventPlace,\n        attendees: this.newEventAttendees\n      };\n      this.activities.push(activity);\n      this.convertActivities(this.activities);\n    },\n    geolocate: function geolocate() {\n      var _this = this;\n\n      navigator.geolocation.getCurrentPosition(function (position) {\n        _this.center = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n      });\n    },\n    getPlaces: function getPlaces() {\n      var _this2 = this;\n\n      fetch(\"http://localhost:8080/places\").then(function (response) {\n        response.json().then(function (data) {\n          //console.log(data);\n          _this2.places = data.places;\n          console.log(_this2.places);\n\n          _this2.addMarkers(_this2.places);\n        });\n      });\n    },\n    getInfoWindowContent: function getInfoWindowContent(event) {\n      return \"<div>\\n        <div>\\n          <h1>\".concat(event.name, \"</h1>\\n        </div>\\n        <div>\\n          <h4>Hosted By: \").concat(event.host, \" <br> Category: \").concat(event.category, \"</h4> <br> Minimum Age: \").concat(event.age, \"\\n        </div>\\n        <div>\\n          <p>\").concat(event.description, \"</p>\\n        </div>\\n      </div>\");\n    },\n    convertActivities: function convertActivities(activities) {\n      for (var index in activities) {\n        console.log(activities[index]);\n        var marker = {\n          name: activities[index].name,\n          host: activities[index].host,\n          category: activities[index].main_category,\n          position: {\n            lat: activities[index].place.geometry.location.lat(),\n            lng: activities[index].place.geometry.location.lng()\n          },\n          icon: {\n            url: this.getMarkerColor(activities[index])\n          }\n        };\n        this.markers.push(marker);\n      }\n    },\n    toggleInfoWindow: function toggleInfoWindow(marker, index) {\n      this.infoWindowPos = marker.position;\n      this.infoContent = this.getInfoWindowContent(marker);\n      console.log(this.infoContent);\n\n      if (this.currentMidx) {\n        this.infoWinOpen = !this.infoWinOpen;\n      } else {\n        this.infoWinOpen = true;\n        this.currentMidx = index;\n      }\n    } //1-5 --> Blue\n    //6-10 --> Purple\n    //11-20 --> Green\n    //21-50 --> Yellow\n    //51-100 --> Red\n\n  }\n};",{"version":3,"sources":["GoogleMap.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div light>\n    <gmap-map\n      ref=\"map\"\n      :center=\"center\"\n      :zoom=\"12\"\n      style=\"width:100%;  height: 100vh;\"\n    >\n      <gmap-marker\n        :key=\"index\"\n        v-for=\"(m, index) in markers\"\n        :position=\"m.position\"\n        @click=\"toggleInfoWindow(m, index)\"\n      ></gmap-marker>\n\n      <gmap-info-window class=\"light\"\n        :options=\"infoOptions\"\n        :position=\"infoWindowPos\"\n        :opened=\"infoWinOpen\"\n        @closeClick=\"infoWinOpen=false\">\n\n        <div v-html=\"infoContent\"></div>\n\n      </gmap-info-window>\n\n    </gmap-map>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"GoogleMap\",\n  props: {\n    events: Array,\n  },\n\n  data() {\n    return {\n      map: null,\n      center: { lat: 45.508, lng: -73.587 },\n      infoContent: '',\n      infoWindowPos: { lat: 0, lng: 0},\n      infoWinOpen: false,\n      currentMidx: null,\n      infoOptions: null,\n      newEventName: \"\",\n      newEventHost: \"\",\n      newEventCategory: \"\",\n      newEventDescription: \"\",\n      newEventPlace: {},\n      newEventAttendees: null,\n      drawer: false,\n      markers: [\n        {\n          name: \"Swimming at the City Pool\",\n          host: \"Karson\",\n          category: \"Outdoors\",\n          description: \"We are going swimming at the city pool\",\n          position: {lat: 52.512, lng: 6.0896},\n          attendees: 7\n        },\n        {\n          name: \"Swimming at the City Pool\",\n          host: \"Karson\",\n          category: \"Outdoors\",\n          description: \"We are going swimming at the city pool\",\n          position: {lat: 152.512, lng: 16.0896},\n          attendees: 7\n        }\n      ],\n      activities: [\n      ],\n      places: [],\n      infoWindows: [],\n      currentPlace: null,\n      \n    };\n  },\n\n  mounted() {\n    this.geolocate();\n    this.getPlaces();\n    // this.convertActivities(this.activities);\n    // this.addMarkers();\n  },\n\n  methods: {\n    // receives a place object via the autocomplete component\n    setPlace(place) {\n      console.log(place);\n      this.newEventPlace = place;\n    },\n    addMarker() {\n      if (this.currentPlace) {\n        const marker = {\n          lat: this.currentPlace.geometry.location.lat(),\n          lng: this.currentPlace.geometry.location.lng()\n        };\n        this.markers.push({ position: marker });\n        this.places.push(this.currentPlace);\n        this.center = marker;\n        this.currentPlace = null;\n      }\n    },\n    addActivity: function() {\n      var activity = {\n        name: this.newEventName,\n        host: this.newEventHost,\n        category: this.newEventCategory,\n        place: this.newEventPlace,\n        attendees: this.newEventAttendees\n      };\n      this.activities.push(activity);\n      this.convertActivities(this.activities);\n    },\n\n    geolocate: function() {\n      navigator.geolocation.getCurrentPosition(position => {\n        this.center = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n      });\n    },\n\n    getPlaces: function() {\n      fetch(\"http://localhost:8080/places\").then(response => {\n        response.json().then(data => {\n          //console.log(data);\n          this.places = data.places;\n          console.log(this.places);\n          this.addMarkers(this.places);\n        });\n      });\n    },\n\n    getInfoWindowContent: function(event) {\n      return (`<div>\n        <div>\n          <h1>${event.name}</h1>\n        </div>\n        <div>\n          <h4>Hosted By: ${event.host} <br> Category: ${event.category}</h4> <br> Minimum Age: ${event.age}\n        </div>\n        <div>\n          <p>${event.description}</p>\n        </div>\n      </div>`);\n    },\n\n    convertActivities: function(activities) {\n      for (var index in activities){\n        console.log(activities[index]);\n        var marker = {\n          name: activities[index].name,\n          host: activities[index].host,\n          category: activities[index].main_category,\n          position: {\n            lat: activities[index].place.geometry.location.lat(),\n            lng: activities[index].place.geometry.location.lng()\n          },\n          icon: {\n            url: this.getMarkerColor(activities[index])\n          }\n\n        };\n        this.markers.push(marker);\n      }\n    },\n\n\n    toggleInfoWindow: function(marker, index) {\n      this.infoWindowPos = marker.position;\n      this.infoContent = this.getInfoWindowContent(marker);\n      console.log(this.infoContent);\n\n      if (this.currentMidx) {\n        this.infoWinOpen = !this.infoWinOpen;\n      } else {\n        this.infoWinOpen = true;\n        this.currentMidx = index;\n      }\n    },\n\n    //1-5 --> Blue\n    //6-10 --> Purple\n    //11-20 --> Green\n    //21-50 --> Yellow\n    //51-100 --> Red\n\n\n  }\n}\n</script>\n\n<style scoped>\n.light {\n  color: black;\n}\n</style>\n\n\n\n"],"sourceRoot":"src/components"}]}